From 0637e772b108e6d22fc9979451ec0db5bd88c4a1 Mon Sep 17 00:00:00 2001
From: Ben Wolsieffer <benwolsieffer@gmail.com>
Date: Wed, 22 Dec 2021 17:15:22 -0500
Subject: [PATCH] Remove Android dependencies and fix warnings.

Remove dependencies on the Android NDK and update paths that assume an Android
filesystem layout.
---
 hardware/touchscreen/digitizer.c  |   3 +-
 hardware/touchscreen/hsuart.h     | 153 ++++++++++++++++++++++++++++++
 hardware/touchscreen/log.h        |   8 ++
 hardware/touchscreen/ts_srv.c     |  38 +++++---
 hardware/touchscreen/ts_srv_set.c |   7 +-
 5 files changed, 191 insertions(+), 18 deletions(-)
 create mode 100644 hardware/touchscreen/hsuart.h
 create mode 100644 hardware/touchscreen/log.h

diff --git a/hardware/touchscreen/digitizer.c b/hardware/touchscreen/digitizer.c
index f682583..9dc95da 100644
--- a/hardware/touchscreen/digitizer.c
+++ b/hardware/touchscreen/digitizer.c
@@ -23,14 +23,15 @@
  */
 
 #define LOG_TAG "ts_power"
-#include <cutils/log.h>
 #include <stdio.h>
 #include <linux/i2c.h>
 #include <linux/i2c-dev.h>
 #include <sys/ioctl.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <unistd.h>
 
+#include "log.h"
 #include "digitizer.h"
 
 static int vdd_fd, xres_fd, wake_fd, i2c_fd, ts_state;
diff --git a/hardware/touchscreen/hsuart.h b/hardware/touchscreen/hsuart.h
new file mode 100644
index 0000000..2901aa0
--- /dev/null
+++ b/hardware/touchscreen/hsuart.h
@@ -0,0 +1,153 @@
+/*
+ *  include/linux/hsuart.h - High speed UART driver APIs
+ *
+ *  Copyright (C) 2008 Palm Inc,
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * THIS PACKAGE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
+ * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
+ *
+ * Author: Amir Frenkel (amir.frenkel@palm.com)
+ * Based on existing Palm HSUART driver interface
+ *
+ */
+#ifndef __HSUART_INCLUDED__
+#define __HSUART_INCLUDED__
+
+/**/
+#define HSUART_VER_MAJOR(v)   (((v)>>8) & 0xFF)
+#define HSUART_VER_MINOR(v)   (((v)) & 0xFF)
+
+/* known set of uart speed settings */
+#define HSUART_SPEED_38K	38400
+#define HSUART_SPEED_115K	115200
+#define HSUART_SPEED_1228K	1228800
+#define HSUART_SPEED_3686K	3686400
+
+/* 
+    Specifies target HSUART_IOCTL_CLEAR_FIFO/HSUART_IOCTL_FLUSH
+*/
+#define HSUART_RX_FIFO   (1 << 0)    // UART RX FIFO
+#define HSUART_TX_FIFO   (1 << 1)    // UART TX FIFO
+#define HSUART_TX_QUEUE  (1 << 2)    // RX BUFFERS
+#define HSUART_RX_QUEUE  (1 << 3)    // TX BUFFERS
+
+/* 
+ *  Rx flow control
+ */
+#define HSUART_RX_FLOW_OFF    0  // DEPRECATED
+#define HSUART_RX_FLOW_AUTO   0
+#define HSUART_RX_FLOW_ON     1
+
+/*  */
+struct hsuart_buf_inf {
+	int rx_buf_num;   // total number of tx buffers
+	int rx_buf_size;  // size of tx buffer
+	int tx_buf_num;   // total number of rx buffers
+	int tx_buf_size;  // size of rx buffer
+};
+
+struct hsuart_mode {
+	int speed;
+	int flags;
+};
+
+struct hsuart_stat {
+	unsigned long tx_bytes;
+	unsigned long rx_bytes;
+	unsigned long rx_dropped;
+};
+
+#define HSUART_MODE_LOOPBACK          (1 << 8)
+
+#define HSUART_MODE_FLOW_CTRL_BIT       (0)
+#define HSUART_MODE_FLOW_CTRL_MODE_MASK (3 << HSUART_MODE_FLOW_CTRL_BIT)
+#define HSUART_MODE_FLOW_CTRL_NONE      (0 << HSUART_MODE_FLOW_CTRL_BIT)
+#define HSUART_MODE_FLOW_CTRL_HW        (1 << HSUART_MODE_FLOW_CTRL_BIT)
+#define HSUART_MODE_FLOW_CTRL_SW        (2 << HSUART_MODE_FLOW_CTRL_BIT)
+
+#define HSUART_MODE_FLOW_STATE_BIT      (9)
+#define HSUART_MODE_FLOW_STATE_MASK     (1 << HSUART_MODE_FLOW_STATE_BIT)
+#define HSUART_MODE_FLOW_STATE_ASSERT   (0 << HSUART_MODE_FLOW_STATE_BIT)
+#define HSUART_MODE_FLOW_STATE_DEASSERT (1 << HSUART_MODE_FLOW_STATE_BIT)
+
+#define HSUART_MODE_FLOW_DIRECTION_BIT     (10)
+#define HSUART_MODE_FLOW_DIRECTION_MASK    (3 << HSUART_MODE_FLOW_DIRECTION_BIT)
+#define HSUART_MODE_FLOW_DIRECTION_RX_TX   (0 << HSUART_MODE_FLOW_DIRECTION_BIT)
+#define HSUART_MODE_FLOW_DIRECTION_RX_ONLY (1 << HSUART_MODE_FLOW_DIRECTION_BIT)
+#define HSUART_MODE_FLOW_DIRECTION_TX_ONLY (2 << HSUART_MODE_FLOW_DIRECTION_BIT)
+
+#define HSUART_MODE_FLOW_CTRL_MASK    ( HSUART_MODE_FLOW_CTRL_MODE_MASK | HSUART_MODE_FLOW_STATE_MASK | HSUART_MODE_FLOW_DIRECTION_MASK )
+
+#define HSUART_MODE_PARITY_BIT        (2)
+#define HSUART_MODE_PARITY_MASK       (3 << HSUART_MODE_PARITY_BIT)
+#define HSUART_MODE_PARITY_NONE       (0 << HSUART_MODE_PARITY_BIT)
+#define HSUART_MODE_PARITY_ODD        (1 << HSUART_MODE_PARITY_BIT)
+#define HSUART_MODE_PARITY_EVEN       (2 << HSUART_MODE_PARITY_BIT)
+ 
+
+/* IOCTLs */
+#define HSUART_IOCTL_GET_VERSION     _IOR('h', 0x01, int)
+#define HSUART_IOCTL_GET_BUF_INF     _IOR('h', 0x02, struct hsuart_buf_inf )
+#define HSUART_IOCTL_GET_UARTMODE    _IOR('h', 0x04, struct hsuart_mode )
+#define HSUART_IOCTL_SET_UARTMODE    _IOW('h', 0x05, struct hsuart_mode )
+#define HSUART_IOCTL_RESET_UART      _IO ('h', 0x06)
+#define HSUART_IOCTL_CLEAR_FIFO      _IOW('h', 0x07, int)  // DEPRECATED use HSUART_IOCTL_FLUSH instead
+#define HSUART_IOCTL_GET_STATS       _IOW('h', 0x08, struct hsuart_stat )
+#define HSUART_IOCTL_SET_RXLAT       _IOW('h', 0x09, int)
+#define HSUART_IOCTL_TX_DRAIN        _IOW('h', 0x0b, int)
+#define HSUART_IOCTL_RX_BYTES        _IOW('h', 0x0c, int)
+#define HSUART_IOCTL_RX_FLOW         _IOW('h', 0x0d, int)
+#define HSUART_IOCTL_FLUSH           _IOW('h', 0x0e, int)
+
+#ifdef __KERNEL__
+
+
+/*
+ *	The UART port initialization and start receiving data is not done 
+ *	automatically when the driver is loaded but delayed to when the 'open' 
+ *	is called.
+ */
+#define HSUART_OPTION_DEFERRED_LOAD        	 (1 << 0)
+#define HSUART_OPTION_MODEM_DEVICE         	 (1 << 1)
+#define HSUART_OPTION_TX_PIO                	 (1 << 2)
+#define HSUART_OPTION_RX_PIO                	 (1 << 3)
+#define HSUART_OPTION_TX_DM                      (1 << 4)
+#define HSUART_OPTION_RX_DM                      (1 << 5)
+#define HSUART_OPTION_RX_FLUSH_QUEUE_ON_SUSPEND  (1 << 6)
+#define HSUART_OPTION_TX_FLUSH_QUEUE_ON_SUSPEND  (1 << 7)
+#define HSUART_OPTION_SCHED_RT                   (1 << 8)
+
+struct hsuart_platform_data {
+	const char *dev_name;
+	int   uart_mode;       // default uart mode 
+	int   uart_speed;      // default uart speed
+	int   options;         // operation options
+	int   tx_buf_size;     // size of tx buffer
+	int   tx_buf_num;      // number of preallocated tx buffers
+	int   rx_buf_size;     // size of rx buffer
+	int   rx_buf_num;      // number of preallocated rx buffers
+	int   max_packet_size; // max packet size
+	int   min_packet_size; // min packet size
+	int   rx_latency;      // in bytes at current speed 
+	int   rts_pin;         // uart rts line pin
+	char *rts_act_mode;    // uart rts line active mode 
+	char *rts_gpio_mode;   // uart rts line gpio mode 
+	int   idle_timeout;       // idle timeout
+	int   idle_poll_timeout;  // idle poll timeout
+	int   dbg_level;          // default debug level.
+
+	int (*p_board_pin_mux_cb) ( int on );
+	int (*p_board_config_gsbi_cb) ( void );
+	int (*p_board_rts_pin_deassert_cb) ( int deassert );
+};
+
+#endif
+
+#endif // __HSUART_INCLUDED__
+
+
diff --git a/hardware/touchscreen/log.h b/hardware/touchscreen/log.h
new file mode 100644
index 0000000..345899d
--- /dev/null
+++ b/hardware/touchscreen/log.h
@@ -0,0 +1,8 @@
+#ifndef ANDROID_TOUCHSCREEN_LOG_H
+#define ANDROID_TOUCHSCREEN_LOG_H
+
+#define ALOGD(...)
+#define ALOGI(...)
+#define ALOGE(...)
+
+#endif // ANDROID_TOUCHSCREEN_LOG_H
diff --git a/hardware/touchscreen/ts_srv.c b/hardware/touchscreen/ts_srv.c
index 5ec40da..e153680 100644
--- a/hardware/touchscreen/ts_srv.c
+++ b/hardware/touchscreen/ts_srv.c
@@ -31,10 +31,8 @@
 
 #define LOG_TAG "ts_srv"
 
-#include <cutils/log.h>
 #include <linux/input.h>
 #include <linux/uinput.h>
-#include <linux/hsuart.h>
 #include <sched.h>
 #include <sys/types.h>
 #include <sys/ioctl.h>
@@ -43,12 +41,16 @@
 #include <unistd.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <stdint.h>
 #include <string.h>
 #include <math.h>
 #include <sys/select.h>
 #include <sys/socket.h>
 #include <sys/un.h>
+#include <sys/stat.h>
 
+#include "hsuart.h"
+#include "log.h"
 #include "digitizer.h"
 #include "config.h"
 
@@ -81,16 +83,10 @@
 
 #define MAX_TOUCH			10 // Max touches that will be reported
 
-#if __ANDROID__
-// This is for Android
 #define UINPUT_LOCATION "/dev/uinput"
-#else
-// This is for webos and possibly other Linuxes
-#define UINPUT_LOCATION "/dev/input/uinput"
-#endif
 
-#define TS_SOCKET_LOCATION "/dev/socket/tsdriver"
-#define TS_SETTINGS_FILE "/data/tssettings"
+#define TS_SOCKET_LOCATION "/run/tsdriver.sock"
+#define TS_SETTINGS_FILE "/etc/tssettings"
 
 int touch_initial_thresh = TOUCH_INITIAL_THRESHOLD;
 int touch_continue_thresh = TOUCH_CONTINUE_THRESHOLD;
@@ -104,6 +100,8 @@ int touch_delay_count = TOUCH_DELAY;
 #define MAX_DELTA_SQ (MAX_DELTA * MAX_DELTA)
 #define MIN_PREV_DELTA_SQ (MIN_PREV_DELTA * MIN_PREV_DELTA)
 
+#define TRACKING_ID_MAX 2147483000
+
 #define X_AXIS_POINTS  30
 #define Y_AXIS_POINTS  40
 #define X_AXIS_MINUS1 X_AXIS_POINTS - 1 // 29
@@ -129,7 +127,7 @@ struct touchpoint {
     int slot;
 #endif
     // Tracking ID that is assigned to this touch.
-    int tracking_id;
+    int32_t tracking_id;
     // Index location of this touch in the previous set of touches.
     int prev_loc;
     // Direction and distance between this touch and the previous touch.
@@ -527,7 +525,7 @@ static void determine_area_loc(float *isum, float *jsum, int *tweight, int i, in
     }
 }
 
-static void process_new_tpoint(struct touchpoint *t, int *tracking_id) {
+static void process_new_tpoint(struct touchpoint *t, int32_t *tracking_id) {
     // Handles setting up a brand new touch point
     if (t->highest_val > touch_delay_thresh) {
         t->tracking_id = *tracking_id;
@@ -546,7 +544,8 @@ static int calc_point(void)
     int tpc = 0;
     float isum = 0, jsum = 0;
     float avgi, avgj;
-    static int previoustpc, tracking_id = 0;
+    static int previoustpc = 0;
+    static int32_t tracking_id = 0;
     int new_debounce_touch = 0;
     static int initialx, initialy;
 
@@ -868,7 +867,7 @@ static int calc_point(void)
         send_uevent(uinput_fd, EV_SYN, SYN_REPORT, 0);
     }
     previoustpc = tpc; // Store the touch count for the next run
-    if (tracking_id >  2147483000)
+    if (tracking_id >  TRACKING_ID_MAX)
         tracking_id = 0; // Reset tracking ID counter if it gets too big
     return tpc; // Return the touch count
 }
@@ -953,6 +952,15 @@ static void open_uinput(void)
     device.id.product = 1;
     device.id.version = 1;
 
+    // The touch IDs continually increase
+    device.absmax[ABS_MT_TRACKING_ID] = TRACKING_ID_MAX;
+    device.absmin[ABS_MT_TRACKING_ID] = 0;
+
+    // There is no real upper bound on the width, but this is bigger than any I
+    // could create.
+    device.absmax[ABS_MT_TOUCH_MAJOR] = 500;
+    device.absmin[ABS_MT_TOUCH_MAJOR] = PIXELS_PER_POINT;
+
     device.absmax[ABS_MT_POSITION_X] = X_RESOLUTION;
     device.absmax[ABS_MT_POSITION_Y] = Y_RESOLUTION;
     device.absmin[ABS_MT_POSITION_X] = 0;
@@ -1156,7 +1164,7 @@ static void process_socket_buffer(char buffer[], int buffer_len, int *uart_fd,
     // F = finger mode
     // S = stylus mode
     // M = return current mode
-    int i, return_val, buf;
+    int i, buf;
 
     for (i=0; i<buffer_len; i++) {
         buf = (int)buffer[i];
diff --git a/hardware/touchscreen/ts_srv_set.c b/hardware/touchscreen/ts_srv_set.c
index a4ba3b4..96d9fe1 100644
--- a/hardware/touchscreen/ts_srv_set.c
+++ b/hardware/touchscreen/ts_srv_set.c
@@ -33,15 +33,18 @@
 
 #define LOG_TAG "ts_srv_set"
 
-#include <cutils/log.h>
 #include <fcntl.h>
 #include <stdio.h>
 #include <string.h>
 #include <sys/socket.h>
 #include <sys/un.h>
+#include <sys/time.h>
+#include <unistd.h>
+
+#include "log.h"
 #include "digitizer.h"
 
-#define TS_SOCKET_LOCATION "/dev/socket/tsdriver"
+#define TS_SOCKET_LOCATION "/run/tsdriver.sock"
 #define TS_SOCKET_TIMEOUT 500000
 #define SOCKET_BUFFER_SIZE 1
 
-- 
2.33.0

